/**
 * tasksSlice.js
 * Manages all task-related API queries and mutations with RTK Query.
 */
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { get } from 'mongoose';

const TASK_API_URL = import.meta.env.VITE_API_URL;

export const taskApiSlice = createApi({
  reducerPath: 'taskApi', // Unique key for the tasks slice
  baseQuery: fetchBaseQuery({
    baseUrl: TASK_API_URL,
    credentials: 'include',
  }),
  tagTypes: ['Task'],
  endpoints: (builder) => ({

    // Create a new task
    addTask: builder.mutation({
      query: (newTask) => ({
        url: '/tasks',
        method: 'POST',
        body: newTask,
      }),
      invalidatesTags: (result, error, newTask) => [
        { type: 'Task', id: newTask.projectId }
      ],
    }),

    // Update an existing task
    updateTask: builder.mutation({
      query: (updatedTask) => ({
        url: `/tasks/${updatedTask._id}`,
        method: 'PUT',
        body: updatedTask,
      }),
      invalidatesTags: (result, error, updatedTask) => [
        { type: 'Task', id: updatedTask._id },
      ],
    }),

    // Delete a task
    deleteTask: builder.mutation({
      query: (taskId) => ({
        url: `/tasks/${taskId}`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, error, id) => [{ type: 'Task', id }],
    }),

    /** USER-TASK RELATED QUERIES */
    // Task assignment endpoints
    assignUserToTask: builder.mutation({
      query: ({ taskId, userId }) => ({
        url: `/tasks/${taskId}/assign`,
        method: 'POST',
        body: { userId }
      }),
      invalidatesTags: (result, error, { taskId }) => [
        { type: 'Task', id: taskId }
      ]
    }),
    
    unassignUserFromTask: builder.mutation({
      query: ({ taskId, userId }) => ({
        url: `/tasks/${taskId}/assign/${userId}`,
        method: 'DELETE'
      }),
      invalidatesTags: (result, error, { taskId }) => [
        { type: 'Task', id: taskId }
      ]
    }),
    
    // Get users assigned to a task
    getTaskAssignees: builder.query({
      query: (taskId) => `/tasks/${taskId}/assignees`,
      providesTags: (result, error, taskId) => [
        { type: 'Task', id: taskId }
      ]
    }),

    /** SUBTASK RELATED QUERIES */
    getSubTasks: builder.query({
      query: (taskId) => `/tasks/${taskId}`,
      providesTags: (result, error, taskId) => [
        { type: 'Task', id: taskId }
      ]
    }),

    createSubTask: builder.mutation({
      query: ({ taskId, subTask }) => ({
        url: `/tasks/${taskId}/subtasks`,
        method: 'POST',
        body: subTask,
      }),
      invalidatesTags: (result, error, { taskId }) => [
        { type: 'Task', id: taskId }
      ],
    }),
    deleteSubTask: builder.mutation({
      query: ({ taskId, subTaskId }) => ({
        url: `/tasks/${taskId}`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, error, { taskId }) => [
        { type: 'Task', id: taskId }
      ],
    }),
    updateSubTask: builder.mutation({
      query: ({ taskId, subTaskId, subTask }) => ({
        url: `/tasks/${taskId}`,
        method: 'PUT',
        body: { subTaskId, subTask },
      }),
      invalidatesTags: (result, error, { taskId }) => [
        { type: 'Task', id: taskId }
      ],
    }),
  }),
});

// Export hooks generated by RTK Query for usage in functional components
export const {
  useAddTaskMutation,
  useUpdateTaskMutation,
  useDeleteTaskMutation,
  useAssignUserToTaskMutation,
  useUnassignUserFromTaskMutation,
  useGetTaskAssigneesQuery,
  useGetSubTasksQuery,
  useCreateSubTaskMutation,
  useDeleteSubTaskMutation,
  useUpdateSubTaskMutation,
} = taskApiSlice;

export default taskApiSlice;